<div id="map"></div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAQHxQJLU1zigMZ3-_sTDxn-FY08nXdChY&libraries=places&callback=initMap" async defer></script>
<script>
    let map;
    let directionsService;
    let directionsRenderer;
    let markers = [];

    function addStyles() {
        const customStyle = document.createElement('style');
        customStyle.textContent = `
            #map { height: 500px; width: 100%; }
            #controls { margin-bottom: 10px; }
            #distance { margin-top: 10px; }
            input, button { margin: 5px; }
            #pac-input {
                background-color: #fff;
                font-family: Roboto;
                font-size: 15px;
                font-weight: 300;
                margin-left: 12px;
                padding: 0 11px 0 13px;
                text-overflow: ellipsis;
                width: 400px;
            }
            #pac-input:focus {
                border-color: #4d90fe;
            }
        `;
        document.head.appendChild(customStyle);
    }

    function createElements() {
        const app = document.getElementById('app');

        const title = document.createElement('h1');
        title.textContent = 'Google Maps - Route Calculation';
        app.appendChild(title);

        const mapDiv = document.createElement('div');
        mapDiv.id = 'map';
        app.appendChild(mapDiv);

        const input = document.createElement('input');
        input.id = 'pac-input';
        input.type = 'text';
        input.placeholder = 'Search for a location';
        mapDiv.appendChild(input);

        const distanceDiv = document.createElement('div');
        distanceDiv.id = 'distance';
        distanceDiv.textContent = 'Distance: N/A';
        app.appendChild(distanceDiv);
    }

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 10.762622, lng: 106.660172 }, // Ho Chi Minh City
            zoom: 12
        });

        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        // Create the search box and link it to the UI element.
        const input = document.getElementById('pac-input');
        const searchBox = new google.maps.places.SearchBox(input);

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        searchBox.addListener('places_changed', function() {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                placeMarker(place.geometry.location);

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        map.addListener('click', function(event) {
            if (markers.length < 2) {
                placeMarker(event.latLng);
            } else {
                alert('You have already selected two points.');
            }
        });
    }

    function placeMarker(location) {
        let marker = new google.maps.Marker({
            position: location,
            map: map
        });
        markers.push(marker);

        if (markers.length === 2) {
            calculateRoute();
        }
    }

    function clearMarkers() {
        markers.forEach(marker => marker.setMap(null));
        markers = [];
        directionsRenderer.setDirections({routes: []});
    }

    function calculateRoute() {
        if (markers.length < 2) return;

        const request = {
            origin: markers[0].getPosition(),
            destination: markers[1].getPosition(),
            travelMode: 'DRIVING'
        };

        directionsService.route(request, function(result, status) {
            if (status === 'OK') {
                directionsRenderer.setDirections(result);
                const route = result.routes[0];
                const distance = route.legs[0].distance.text;
                document.getElementById('distance').textContent = 'Distance: ' + distance;
            }
        });
    }

    function init() {
        addStyles();
        createElements();
    }

    document.addEventListener('DOMContentLoaded', init);
</script>